#!/usr/bin/env node

/**
 * Module dependencies.
 */

require("dotenv").config();
const debug = require("debug")("express:server");
const http = require("http");
const mongoose = require('mongoose')

const app = require("../app");



/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "8080");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces if the database connection is successfull
 */
connectingWithDatabase()
  .on("error", console.log)
  .on("disconnected", connectingWithDatabase)
  .on("open", () => {
    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  console.log(`Server Listening on ${bind}`);
  debug("Listening on " + bind);
}


/* 
* Connecting with database  and return connecton object
*/
function connectingWithDatabase() {
  const mongoUser = process.env.MONGO_USER || null;
  const mongoPassword = process.MONGO_PASSWORD || null;
  const options = {
    keepAlive: 1,
    useNewUrlParser: true,
    useUnifiedTopology: true,
    useCreateIndex: true,
    useFindAndModify: false,
  };

  if (mongoUser && mongoPassword) {
    options.auth = { user: mongoUser, password: mongoPassword };
  }
  const mongoUrl =
    process.env.MONGODB_URL;
  mongoose.connect(mongoUrl, options);
  return mongoose.connection;
};